{"version":3,"sources":["components/Card/Card.js","components/Board/Board.js","deck.js","App.js","reportWebVitals.js","index.js"],"names":["Card","cardName","id","handleClick","flipped","disabled","solved","className","onClick","src","Board","cards","map","card","includes","deck","array","_array","slice","i","length","rand","Math","floor","random","shuffle","reduce","acc","push","App","useState","setCards","setFlipped","setSolved","setDisabled","useEffect","sameCardClicked","isMatch","clickedCard","find","flippedCard","resetCards","window","location","reload","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c0b1f37.chunk.js","sourcesContent":["import React from 'react'; \r\nimport './Card.css';\r\n\r\n\r\nconst Card = ({cardName,id ,handleClick, flipped,  disabled, solved}) => {\r\n    return ( \r\n        <div className={`flip-container card ${flipped ? 'flipped': ''}`} \r\n            onClick={()=> disabled ? null: handleClick(id) } >\r\n            <div className=\"flipper\">\r\n                <img src={flipped || solved ? `/img/${cardName}.png` : `/img/back.png`} \r\n                      className={flipped  ? 'front' : 'back'}/>\r\n            \r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nconst Board = ({cards, flipped, handleClick, disabled,solved}) => {\r\n    return (\r\n        <div className=\"board\">\r\n            {cards.map(card =>{\r\n                return (\r\n                    <Card \r\n                        key={card.id}\r\n                        id={card.id}\r\n                        cardName={card.cardName}\r\n                        flipped = {flipped.includes(card.id)} \r\n                        handleClick={handleClick}\r\n                        disabled={disabled || solved.includes(card.id)}\r\n                        solved={solved.includes(card.id)}\r\n                    />    \r\n                )\r\n            })}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Board;","const shuffle =(array)=>{\r\n    const _array = array.slice(0);\r\n    for (let i= _array.length -1; i>0; i--){\r\n        let rand = Math.floor(Math.random()*(i+1));\r\n        [_array[i],_array[rand]] = [_array[rand],_array[i]]\r\n    }\r\n    return _array\r\n}\r\n\r\nconst deck = () => {\r\n    let id = 0;\r\n    const cards = ['cherry','cocktail','footprint','pagoda',\r\n    'sedan','star','superman','unicorn'].reduce((acc, card)=>{\r\n        acc.push({\r\n            id:id++,\r\n            cardName:card\r\n        })\r\n        acc.push({\r\n            id:id++,\r\n            cardName:card\r\n        })\r\n        return acc\r\n    },[]);\r\n    \r\n    return shuffle(cards)   \r\n    \r\n}\r\n \r\nexport default deck;","import './App.css';\nimport Board from './components/Board/Board';\nimport React, { useState, useEffect} from 'react';\nimport deck from './deck';\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false)\n\n  useEffect(() => {\n      setCards(deck())\n  }, [])\n\n  const handleClick =(id)=>{\n        setDisabled(true);\n        if(flipped.length ===0){\n          setFlipped([id])\n          setDisabled(false)\n        } else{\n          if(sameCardClicked(id)){\n            setDisabled(false)\n          }else{\n            setFlipped([flipped[0],id])\n            if(isMatch(id)){\n              setSolved([...solved,flipped[0],id])\n              resetCards()\n            }else{\n              setTimeout(resetCards,600) \n            }            \n          }\n        }\n  }\n\n  const sameCardClicked =(id)=>flipped.includes(id); \n\n  const isMatch =(id)=>{\n    const clickedCard = cards.find(card=>card.id === id);\n    const flippedCard = cards.find(card=>card.id=== flipped[0]);\n\n    return clickedCard.cardName === flippedCard.cardName\n  }\n\n  const resetCards =()=>{\n    setFlipped([]);\n    setDisabled(false);\n  }\n\n  const restart =()=>{\n    window.location.reload();\n  }\n\n\n  return (\n    <div className=\"App\">      \n      <h1>Memory Game</h1>\n      <h2>Can you remember where the cards are?</h2>\n      <button className='reload' onClick={restart}>New Game</button>\n      <Board \n        cards={cards}\n        flipped={flipped}\n        disabled={disabled}\n        handleClick={handleClick}\n        solved={solved}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}